package LOGICA.Analizadores;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;

parser code
{:
	public static LinkedList<NodoError> TablaErr = new LinkedList<NodoError>();
	public int bandera = 0;
	public int contador = 0;
	
/**Metodo al que se llama automaticamente ante algun error sintactico*/
public void syntax_error(Symbol s){
	String lexema = s.value.toString();
	int fila = s.right;
	int columna = s.left;
	System.out.println("!!!!!! Error Sintactico Recuperado !!!!!!");
	System.out.println("\t\tLexema: "+lexema);
	System.out.println("\t\tFila: "+fila);
	System.out.println("\t\tColumna: "+columna);
	NodoError datos = new NodoError(lexema, "ERROR SINTACTICO", fila, columna, "Simbolo no esperado");
	TablaErr.add(datos);
	bandera = 1;
}

/*Metodo al que se llama en el momento en que ya no es posible uan recuperacion de errores*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
	String lexema = s.value.toString();
	int fila = s.right;
	int columna = s.left;
	System.out.println("!!!!!! Error Sintactico, Panic Mode !!!!!!");
	System.out.println("\t\tLexema: "+lexema);
	System.out.println("\t\tFila: "+fila);
	System.out.println("\t\tColumna: "+columna);
	NodoError datos = new NodoError(lexema, "ERROR SINTACTICO", fila, columna, "Simbolo no esperado Error Fatal");
	TablaErr.add(datos);
	bandera = 1;
}
:}

action code
{:
	//Espacio que servira para metodos en el lenguaje de java
:}

//terminal Tini, Tfin, Rint, Rdeci, Rcade, Rbool, Tpara, Tmientras, Tsi, Tentonces, Tentonces_si, Ty, To, Tleer, Tmostrar, Tfin_para, Tfin_mientras, Tfin_si, Rtrue, Rfalse, Tmas, Tmenos, Tpor, Tentre, Tmenor, Tmayor, Tmayor_igual, Tmenor_igual, Tasign, Tdifer, Tigual, Tsep, Tcoma, Tnumero, Tid, Tcadena;

terminal Tasign, Tmostrar, Tleer, Tsep, Tini, Tfin, Rdeci, Rbool, Rcade, Rint, Tid, Tmas, Tmenos, Tpor, Tentre, Tnumero, Tcadena, Tsi, Tfin_si, Tmenor, Tmayor, Tmayor_igual, Tmenor_igual, Tdifer, Tigual, Tentonces_si;

non terminal OPERACION, OPERAR, OPERADOR, INICIO, PROGRAMA, CUERPO, VARIABLE, CICLO, CONDICIONAL_IF, MOSTRAR, LEER, TIPO, EXPRESION, E,T,F, CONDICIONAL_IF_2, CONDICION, OPERADOR_COMPARADOR;

start with INICIO;

INICIO::= PROGRAMA;

PROGRAMA::= Tini CUERPO;

CUERPO::= VARIABLE CUERPO | VARIABLE Tfin | LEER CUERPO | LEER Tfin | MOSTRAR CUERPO | MOSTRAR Tfin | OPERACION CUERPO | OPERACION Tfin | CONDICIONAL_IF | CICLO;

VARIABLE::= Tid Tsep TIPO Tsep EXPRESION | Tid ;

TIPO::= Rint | Rcade | Rdeci | Rbool;
	
EXPRESION::= E | Tfin;

E::= E Tmas T | E Tmenos T | T;

T::= T Tpor F | T Tentre F | F;

F::= Tnumero | Tcadena;

LEER::= Tleer Tid;

MOSTRAR::= Tmostrar Tcadena  | Tmostrar Tid Tcadena | Tmostrar Tid;

OPERACION ::= Tid Tasign OPERAR;
OPERAR ::= Tnumero OPERADOR Tnumero | Tnumero OPERADOR OPERAR 
         | Tnumero OPERADOR Tid
         | Tid OPERADOR Tnumero | Tid OPERADOR OPERAR 
         | Tid OPERADOR Tid;
OPERADOR ::= Tmas | Tmenos | Tpor | Tentre;

CONDICIONAL_IF::= Tsi CONDICION CUERPO CONDICIONAL_IF_2;

CONDICIONAL_IF_2::= Tfin_si | Tfin_si Tfin | Tentonces_si CUERPO Tfin_si | Tentonces_si CUERPO Tfin_si Tfin | Tentonces_si CONDICION CUERPO CONDICIONAL_IF_2; 

CONDICION::= Tid OPERADOR_COMPARADOR Tid;

OPERADOR_COMPARADOR::=  Tmayor | Tmenor | Tmayor_igual | Tmenor_igual | Tigual | Tdifer;

