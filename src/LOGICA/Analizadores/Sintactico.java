
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LOGICA.Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\006\003\000\002\007" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\002\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\002\004\000\002\002\003\000\002\002\004\000\002" +
    "\002\003\000\002\011\007\000\002\011\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\015\004\000\002\014\004\000\002\014\005" +
    "\000\002\014\004\000\002\003\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\013\006" +
    "\000\002\023\003\000\002\023\005\000\002\023\006\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\011\004\001\002\000\012\006\021\007" +
    "\011\017\012\026\017\001\002\000\004\002\007\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002\000" +
    "\014\006\021\007\011\012\153\017\012\026\017\001\002" +
    "\000\004\017\151\001\002\000\026\004\uffe6\005\104\006" +
    "\uffe6\007\uffe6\010\103\012\uffe6\017\uffe6\026\uffe6\027\uffe6" +
    "\036\uffe6\001\002\000\014\006\021\007\011\012\102\017" +
    "\012\026\017\001\002\000\014\006\021\007\011\012\100" +
    "\017\012\026\017\001\002\000\004\002\uffff\001\002\000" +
    "\014\006\021\007\011\012\076\017\012\026\017\001\002" +
    "\000\006\017\031\024\032\001\002\000\004\002\ufff4\001" +
    "\002\000\006\017\025\025\026\001\002\000\014\006\021" +
    "\007\011\012\024\017\012\026\017\001\002\000\004\002" +
    "\ufff6\001\002\000\004\002\ufff5\001\002\000\024\004\uffd4" +
    "\006\uffd4\007\uffd4\012\uffd4\017\uffd4\025\027\026\uffd4\027" +
    "\uffd4\036\uffd4\001\002\000\022\004\uffd6\006\uffd6\007\uffd6" +
    "\012\uffd6\017\uffd6\026\uffd6\027\uffd6\036\uffd6\001\002\000" +
    "\022\004\uffd5\006\uffd5\007\uffd5\012\uffd5\017\uffd5\026\uffd5" +
    "\027\uffd5\036\uffd5\001\002\000\012\006\021\007\011\017" +
    "\012\026\017\001\002\000\016\030\033\031\036\032\037" +
    "\033\040\034\035\035\041\001\002\000\016\030\033\031" +
    "\036\032\037\033\040\034\035\035\041\001\002\000\006" +
    "\017\uffbf\024\uffbf\001\002\000\006\017\042\024\043\001" +
    "\002\000\006\017\uffbb\024\uffbb\001\002\000\006\017\uffc0" +
    "\024\uffc0\001\002\000\006\017\uffbe\024\uffbe\001\002\000" +
    "\006\017\uffbd\024\uffbd\001\002\000\006\017\uffbc\024\uffbc" +
    "\001\002\000\012\006\uffc1\007\uffc1\017\uffc1\026\uffc1\001" +
    "\002\000\012\006\uffc3\007\uffc3\017\uffc3\026\uffc3\001\002" +
    "\000\006\017\045\024\046\001\002\000\012\006\uffc4\007" +
    "\uffc4\017\uffc4\026\uffc4\001\002\000\012\006\uffc2\007\uffc2" +
    "\017\uffc2\026\uffc2\001\002\000\010\004\066\027\065\036" +
    "\064\001\002\000\020\004\uffec\006\021\007\011\017\012" +
    "\026\017\027\uffec\036\uffec\001\002\000\020\004\uffee\006" +
    "\021\007\011\017\012\026\017\027\uffee\036\uffee\001\002" +
    "\000\020\004\ufff2\006\021\007\011\017\012\026\017\027" +
    "\ufff2\036\ufff2\001\002\000\020\004\ufff0\006\021\007\011" +
    "\017\012\026\017\027\ufff0\036\ufff0\001\002\000\020\004" +
    "\uffe8\006\021\007\011\017\012\026\017\027\uffe8\036\uffe8" +
    "\001\002\000\020\004\uffea\006\021\007\011\017\012\026" +
    "\017\027\uffea\036\uffea\001\002\000\010\004\uffeb\027\uffeb" +
    "\036\uffeb\001\002\000\010\004\uffe9\027\uffe9\036\uffe9\001" +
    "\002\000\010\004\ufff1\027\ufff1\036\ufff1\001\002\000\010" +
    "\004\ufff3\027\ufff3\036\ufff3\001\002\000\010\004\uffef\027" +
    "\uffef\036\uffef\001\002\000\010\004\uffed\027\uffed\036\uffed" +
    "\001\002\000\006\017\031\024\032\001\002\000\022\004" +
    "\uffc7\006\uffc7\007\uffc7\012\uffc7\017\uffc7\026\uffc7\027\uffc7" +
    "\036\uffc7\001\002\000\012\006\021\007\011\017\012\026" +
    "\017\001\002\000\022\004\uffc8\006\uffc8\007\uffc8\012\uffc8" +
    "\017\uffc8\026\uffc8\027\uffc8\036\uffc8\001\002\000\004\027" +
    "\071\001\002\000\022\004\uffc6\006\uffc6\007\uffc6\012\uffc6" +
    "\017\uffc6\026\uffc6\027\uffc6\036\uffc6\001\002\000\012\006" +
    "\021\007\011\017\012\026\017\001\002\000\010\004\066" +
    "\027\065\036\064\001\002\000\022\004\uffc5\006\uffc5\007" +
    "\uffc5\012\uffc5\017\uffc5\026\uffc5\027\uffc5\036\uffc5\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\ufffd\001\002\000\004" +
    "\002\ufffa\001\002\000\004\002\ufff9\001\002\000\012\013" +
    "\124\014\130\015\125\016\126\001\002\000\006\017\106" +
    "\024\107\001\002\000\022\004\uffd3\006\uffd3\007\uffd3\012" +
    "\uffd3\017\uffd3\026\uffd3\027\uffd3\036\uffd3\001\002\000\012" +
    "\020\112\021\111\022\110\023\114\001\002\000\012\020" +
    "\112\021\111\022\110\023\114\001\002\000\006\017\uffca" +
    "\024\uffca\001\002\000\006\017\uffcb\024\uffcb\001\002\000" +
    "\006\017\uffcc\024\uffcc\001\002\000\006\017\116\024\117" +
    "\001\002\000\006\017\uffc9\024\uffc9\001\002\000\022\004" +
    "\uffd1\006\uffd1\007\uffd1\012\uffd1\017\uffd1\026\uffd1\027\uffd1" +
    "\036\uffd1\001\002\000\032\004\uffd0\006\uffd0\007\uffd0\012" +
    "\uffd0\017\uffd0\020\112\021\111\022\110\023\114\026\uffd0" +
    "\027\uffd0\036\uffd0\001\002\000\032\004\uffd2\006\uffd2\007" +
    "\uffd2\012\uffd2\017\uffd2\020\112\021\111\022\110\023\114" +
    "\026\uffd2\027\uffd2\036\uffd2\001\002\000\006\017\122\024" +
    "\123\001\002\000\022\004\uffce\006\uffce\007\uffce\012\uffce" +
    "\017\uffce\026\uffce\027\uffce\036\uffce\001\002\000\032\004" +
    "\uffcd\006\uffcd\007\uffcd\012\uffcd\017\uffcd\020\112\021\111" +
    "\022\110\023\114\026\uffcd\027\uffcd\036\uffcd\001\002\000" +
    "\032\004\uffcf\006\uffcf\007\uffcf\012\uffcf\017\uffcf\020\112" +
    "\021\111\022\110\023\114\026\uffcf\027\uffcf\036\uffcf\001" +
    "\002\000\004\010\uffe3\001\002\000\004\010\uffe4\001\002" +
    "\000\004\010\uffe5\001\002\000\004\010\131\001\002\000" +
    "\004\010\uffe2\001\002\000\010\012\132\024\137\025\140" +
    "\001\002\000\022\004\uffe0\006\uffe0\007\uffe0\012\uffe0\017" +
    "\uffe0\026\uffe0\027\uffe0\036\uffe0\001\002\000\032\004\uffdd" +
    "\006\uffdd\007\uffdd\012\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\144\023\145\026\uffdd\027\uffdd\036\uffdd\001\002\000\022" +
    "\004\uffe7\006\uffe7\007\uffe7\012\uffe7\017\uffe7\026\uffe7\027" +
    "\uffe7\036\uffe7\001\002\000\032\004\uffda\006\uffda\007\uffda" +
    "\012\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\026" +
    "\uffda\027\uffda\036\uffda\001\002\000\026\004\uffe1\006\uffe1" +
    "\007\uffe1\012\uffe1\017\uffe1\020\142\021\141\026\uffe1\027" +
    "\uffe1\036\uffe1\001\002\000\032\004\uffd9\006\uffd9\007\uffd9" +
    "\012\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\026" +
    "\uffd9\027\uffd9\036\uffd9\001\002\000\032\004\uffd8\006\uffd8" +
    "\007\uffd8\012\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\026\uffd8\027\uffd8\036\uffd8\001\002\000\006\024\137" +
    "\025\140\001\002\000\006\024\137\025\140\001\002\000" +
    "\032\004\uffdf\006\uffdf\007\uffdf\012\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\144\023\145\026\uffdf\027\uffdf\036\uffdf\001" +
    "\002\000\006\024\137\025\140\001\002\000\006\024\137" +
    "\025\140\001\002\000\032\004\uffdb\006\uffdb\007\uffdb\012" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb" +
    "\027\uffdb\036\uffdb\001\002\000\032\004\uffdc\006\uffdc\007" +
    "\uffdc\012\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\026\uffdc\027\uffdc\036\uffdc\001\002\000\032\004\uffde\006" +
    "\uffde\007\uffde\012\uffde\017\uffde\020\uffde\021\uffde\022\144" +
    "\023\145\026\uffde\027\uffde\036\uffde\001\002\000\022\004" +
    "\uffd7\006\uffd7\007\uffd7\012\uffd7\017\uffd7\026\uffd7\027\uffd7" +
    "\036\uffd7\001\002\000\004\002\ufff8\001\002\000\004\002" +
    "\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\006\006\004\007\005\001\001\000\020\003" +
    "\007\010\014\011\013\012\017\013\021\014\012\015\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\007\010\151\011\013\012\017\013\021" +
    "\014\012\015\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\007\010\100\011\013\012\017\013\021" +
    "\014\012\015\015\001\001\000\020\003\007\010\076\011" +
    "\013\012\017\013\021\014\012\015\015\001\001\000\002" +
    "\001\001\000\020\003\007\010\074\011\013\012\017\013" +
    "\021\014\012\015\015\001\001\000\004\024\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\007\010" +
    "\022\011\013\012\017\013\021\014\012\015\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\002\046\003\047" +
    "\011\051\012\053\013\054\014\050\015\052\001\001\000" +
    "\004\025\043\001\001\000\004\025\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\066\001\001" +
    "\000\020\002\062\003\047\011\051\012\053\013\054\014" +
    "\050\015\052\001\001\000\020\002\061\003\047\011\051" +
    "\012\053\013\054\014\050\015\052\001\001\000\020\002" +
    "\060\003\047\011\051\012\053\013\054\014\050\015\052" +
    "\001\001\000\020\002\057\003\047\011\051\012\053\013" +
    "\054\014\050\015\052\001\001\000\020\002\056\003\047" +
    "\011\051\012\053\013\054\014\050\015\052\001\001\000" +
    "\020\002\055\003\047\011\051\012\053\013\054\014\050" +
    "\015\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\071\001\001\000\002\001\001\000" +
    "\020\002\067\003\047\011\051\012\053\013\054\014\050" +
    "\015\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\072\003\047\011\051\012\053" +
    "\013\054\014\050\015\052\001\001\000\004\023\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\126\001\001\000\004\004\104" +
    "\001\001\000\002\001\001\000\004\005\117\001\001\000" +
    "\004\005\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\117\001\001\000\004" +
    "\005\112\001\001\000\004\004\120\001\001\000\002\001" +
    "\001\000\004\005\117\001\001\000\004\005\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\133\020\135" +
    "\021\132\022\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\147\022" +
    "\134\001\001\000\006\021\142\022\134\001\001\000\002" +
    "\001\001\000\004\022\146\001\001\000\004\022\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static LinkedList<NodoError> TablaErr = new LinkedList<NodoError>();
	public int bandera = 0;
	public int contador = 0;
	
/**Metodo al que se llama automaticamente ante algun error sintactico*/
public void syntax_error(Symbol s){
	String lexema = s.value.toString();
	int fila = s.right;
	int columna = s.left;
	System.out.println("!!!!!! Error Sintactico Recuperado !!!!!!");
	System.out.println("\t\tLexema: "+lexema);
	System.out.println("\t\tFila: "+fila);
	System.out.println("\t\tColumna: "+columna);
	NodoError datos = new NodoError(lexema, "ERROR SINTACTICO", fila, columna, "Simbolo no esperado");
	TablaErr.add(datos);
	bandera = 1;
}

/*Metodo al que se llama en el momento en que ya no es posible uan recuperacion de errores*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
	String lexema = s.value.toString();
	int fila = s.right;
	int columna = s.left;
	System.out.println("!!!!!! Error Sintactico, Panic Mode !!!!!!");
	System.out.println("\t\tLexema: "+lexema);
	System.out.println("\t\tFila: "+fila);
	System.out.println("\t\tColumna: "+columna);
	NodoError datos = new NodoError(lexema, "ERROR SINTACTICO", fila, columna, "Simbolo no esperado Error Fatal");
	TablaErr.add(datos);
	bandera = 1;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


	//Espacio que servira para metodos en el lenguaje de java

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= Tini CUERPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= VARIABLE CUERPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= VARIABLE Tfin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= LEER CUERPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= LEER Tfin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= MOSTRAR CUERPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= MOSTRAR Tfin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= OPERACION CUERPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= OPERACION Tfin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= CONDICIONAL_IF CUERPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= CONDICIONAL_IF Tfin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= CICLO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO_2 ::= VARIABLE CUERPO_2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO_2 ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO_2 ::= LEER CUERPO_2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_2 ::= LEER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_2 ::= MOSTRAR CUERPO_2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_2 ::= MOSTRAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_2 ::= OPERACION CUERPO_2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_2 ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_2 ::= CONDICIONAL_IF CUERPO_2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_2 ::= CONDICIONAL_IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_2 ::= CICLO CUERPO_2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_2 ::= CICLO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_2",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIABLE ::= Tid Tsep TIPO Tsep EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARIABLE ::= Tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= Rint 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO ::= Rcade 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO ::= Rdeci 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= Rbool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= E 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= Tfin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E Tmas T 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E Tmenos T 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= T 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // T ::= T Tpor F 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // T ::= T Tentre F 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // T ::= F 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // F ::= Tnumero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // F ::= Tcadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LEER ::= Tleer Tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LEER",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MOSTRAR ::= Tmostrar Tcadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOSTRAR",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MOSTRAR ::= Tmostrar Tid Tcadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOSTRAR",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MOSTRAR ::= Tmostrar Tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOSTRAR",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= Tid Tasign OPERAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERAR ::= Tnumero OPERADOR Tnumero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERAR ::= Tnumero OPERADOR OPERAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERAR ::= Tnumero OPERADOR Tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERAR ::= Tid OPERADOR Tnumero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERAR ::= Tid OPERADOR OPERAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERAR ::= Tid OPERADOR Tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADOR ::= Tmas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADOR ::= Tmenos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADOR ::= Tpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADOR ::= Tentre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONAL_IF ::= Tsi CONDICION CUERPO_2 CONDICIONAL_IF_2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONAL_IF_2 ::= Tfin_si 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF_2",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICIONAL_IF_2 ::= Tentonces CUERPO_2 Tfin_si 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF_2",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICIONAL_IF_2 ::= Tentonces_si CONDICION CUERPO_2 CONDICIONAL_IF_2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF_2",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICION ::= Tid OPERADOR_COMPARADOR Tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICION ::= Tnumero OPERADOR_COMPARADOR Tnumero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION ::= Tid OPERADOR_COMPARADOR Tnumero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION ::= Tnumero OPERADOR_COMPARADOR Tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADOR_COMPARADOR ::= Tmayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_COMPARADOR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADOR_COMPARADOR ::= Tmenor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_COMPARADOR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADOR_COMPARADOR ::= Tmayor_igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_COMPARADOR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADOR_COMPARADOR ::= Tmenor_igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_COMPARADOR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADOR_COMPARADOR ::= Tigual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_COMPARADOR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADOR_COMPARADOR ::= Tdifer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_COMPARADOR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
